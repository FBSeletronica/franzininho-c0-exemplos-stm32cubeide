
00-exemplo-template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002170  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002230  08002230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d0  080022d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022d0  080022d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022d0  080022d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d0  080022d0  000122d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080022e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080022e4  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009be2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179e  00000000  00000000  00029c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0002b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011e61  00000000  00000000  0002c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000945d  00000000  00000000  0003dfb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f845  00000000  00000000  0004740e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6c53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001820  00000000  00000000  000b6ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002218 	.word	0x08002218

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002218 	.word	0x08002218

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fa0a 	bl	8000812 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f841 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f8d1 	bl	80005a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000406:	f000 f881 	bl	800050c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  const uint8_t msg[] = "Hello Franzininho C0\r\n";
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4a1a      	ldr	r2, [pc, #104]	; (8000478 <main+0x84>)
 800040e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000410:	c313      	stmia	r3!, {r0, r1, r4}
 8000412:	ca03      	ldmia	r2!, {r0, r1}
 8000414:	c303      	stmia	r3!, {r0, r1}
 8000416:	8811      	ldrh	r1, [r2, #0]
 8000418:	8019      	strh	r1, [r3, #0]
 800041a:	7892      	ldrb	r2, [r2, #2]
 800041c:	709a      	strb	r2, [r3, #2]
  uint16_t i = 0;
 800041e:	231e      	movs	r3, #30
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	2200      	movs	r2, #0
 8000424:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_Delay(100);			//delay 1 seg
 8000426:	2064      	movs	r0, #100	; 0x64
 8000428:	f000 fa6e 	bl	8000908 <HAL_Delay>
	 i++;
 800042c:	211e      	movs	r1, #30
 800042e:	187b      	adds	r3, r7, r1
 8000430:	881a      	ldrh	r2, [r3, #0]
 8000432:	187b      	adds	r3, r7, r1
 8000434:	3201      	adds	r2, #1
 8000436:	801a      	strh	r2, [r3, #0]
	 if(i>=10){
 8000438:	187b      	adds	r3, r7, r1
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	2b09      	cmp	r3, #9
 800043e:	d90a      	bls.n	8000456 <main+0x62>
		 HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);	//inverte LED1
 8000440:	4b0e      	ldr	r3, [pc, #56]	; (800047c <main+0x88>)
 8000442:	2140      	movs	r1, #64	; 0x40
 8000444:	0018      	movs	r0, r3
 8000446:	f000 fce9 	bl	8000e1c <HAL_GPIO_TogglePin>
		 HAL_UART_Transmit(&huart1,msg, sizeof(msg),100); //envia mensagem na serial
 800044a:	1d39      	adds	r1, r7, #4
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <main+0x8c>)
 800044e:	2364      	movs	r3, #100	; 0x64
 8000450:	2217      	movs	r2, #23
 8000452:	f001 f9ab 	bl	80017ac <HAL_UART_Transmit>
	 }
	 if(!HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin)) //se botão pressionado
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	005a      	lsls	r2, r3, #1
 800045a:	23a0      	movs	r3, #160	; 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f000 fca1 	bl	8000da8 <HAL_GPIO_ReadPin>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d1dd      	bne.n	8000426 <main+0x32>
		 HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);	//inverte LED2
 800046a:	4b04      	ldr	r3, [pc, #16]	; (800047c <main+0x88>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fcd4 	bl	8000e1c <HAL_GPIO_TogglePin>
	 HAL_Delay(100);			//delay 1 seg
 8000474:	e7d7      	b.n	8000426 <main+0x32>
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	08002230 	.word	0x08002230
 800047c:	50000400 	.word	0x50000400
 8000480:	20000028 	.word	0x20000028

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b08d      	sub	sp, #52	; 0x34
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	2414      	movs	r4, #20
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	231c      	movs	r3, #28
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f001 feb7 	bl	8002208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049a:	003b      	movs	r3, r7
 800049c:	0018      	movs	r0, r3
 800049e:	2314      	movs	r3, #20
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f001 feb0 	bl	8002208 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2202      	movs	r2, #2
 80004ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2280      	movs	r2, #128	; 0x80
 80004b2:	0052      	lsls	r2, r2, #1
 80004b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2240      	movs	r2, #64	; 0x40
 80004c0:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fcc5 	bl	8000e54 <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80004ce:	f000 f8c1 	bl	8000654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	003b      	movs	r3, r7
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004ea:	003b      	movs	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004f0:	003b      	movs	r3, r7
 80004f2:	2101      	movs	r1, #1
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 fea7 	bl	8001248 <HAL_RCC_ClockConfig>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004fe:	f000 f8a9 	bl	8000654 <Error_Handler>
  }
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b00d      	add	sp, #52	; 0x34
 8000508:	bd90      	pop	{r4, r7, pc}
	...

0800050c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000510:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 8000512:	4a24      	ldr	r2, [pc, #144]	; (80005a4 <MX_USART1_UART_Init+0x98>)
 8000514:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000516:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 8000518:	22e1      	movs	r2, #225	; 0xe1
 800051a:	0252      	lsls	r2, r2, #9
 800051c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000524:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 8000532:	220c      	movs	r2, #12
 8000534:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 8000544:	2200      	movs	r2, #0
 8000546:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 800054a:	2200      	movs	r2, #0
 800054c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 8000550:	2200      	movs	r2, #0
 8000552:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 8000556:	0018      	movs	r0, r3
 8000558:	f001 f8d2 	bl	8001700 <HAL_UART_Init>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000560:	f000 f878 	bl	8000654 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 8000566:	2100      	movs	r1, #0
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fd49 	bl	8002000 <HAL_UARTEx_SetTxFifoThreshold>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000572:	f000 f86f 	bl	8000654 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 8000578:	2100      	movs	r1, #0
 800057a:	0018      	movs	r0, r3
 800057c:	f001 fd80 	bl	8002080 <HAL_UARTEx_SetRxFifoThreshold>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000584:	f000 f866 	bl	8000654 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <MX_USART1_UART_Init+0x94>)
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fcfe 	bl	8001f8c <HAL_UARTEx_DisableFifoMode>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000594:	f000 f85e 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	20000028 	.word	0x20000028
 80005a4:	40013800 	.word	0x40013800

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	240c      	movs	r4, #12
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	0018      	movs	r0, r3
 80005b4:	2314      	movs	r3, #20
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f001 fe25 	bl	8002208 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b23      	ldr	r3, [pc, #140]	; (800064c <MX_GPIO_Init+0xa4>)
 80005c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <MX_GPIO_Init+0xa4>)
 80005c4:	2102      	movs	r1, #2
 80005c6:	430a      	orrs	r2, r1
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <MX_GPIO_Init+0xa4>)
 80005cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ce:	2202      	movs	r2, #2
 80005d0:	4013      	ands	r3, r2
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_GPIO_Init+0xa4>)
 80005d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_GPIO_Init+0xa4>)
 80005dc:	2101      	movs	r1, #1
 80005de:	430a      	orrs	r2, r1
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_GPIO_Init+0xa4>)
 80005e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005e6:	2201      	movs	r2, #1
 80005e8:	4013      	ands	r3, r2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_GPIO_Init+0xa8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	21c0      	movs	r1, #192	; 0xc0
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 fbf4 	bl	8000de2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	22c0      	movs	r2, #192	; 0xc0
 80005fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	193b      	adds	r3, r7, r4
 8000602:	2201      	movs	r2, #1
 8000604:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000612:	193b      	adds	r3, r7, r4
 8000614:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <MX_GPIO_Init+0xa8>)
 8000616:	0019      	movs	r1, r3
 8000618:	0010      	movs	r0, r2
 800061a:	f000 fa5b 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800061e:	0021      	movs	r1, r4
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	0052      	lsls	r2, r2, #1
 8000626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2201      	movs	r2, #1
 8000632:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000634:	187a      	adds	r2, r7, r1
 8000636:	23a0      	movs	r3, #160	; 0xa0
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fa49 	bl	8000ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b009      	add	sp, #36	; 0x24
 8000648:	bd90      	pop	{r4, r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	40021000 	.word	0x40021000
 8000650:	50000400 	.word	0x50000400

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065c:	e7fe      	b.n	800065c <Error_Handler+0x8>
	...

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_MspInit+0x50>)
 8000668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_MspInit+0x50>)
 800066c:	2101      	movs	r1, #1
 800066e:	430a      	orrs	r2, r1
 8000670:	641a      	str	r2, [r3, #64]	; 0x40
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_MspInit+0x50>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	2201      	movs	r2, #1
 8000678:	4013      	ands	r3, r2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_MspInit+0x50>)
 8000680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <HAL_MspInit+0x50>)
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	0549      	lsls	r1, r1, #21
 8000688:	430a      	orrs	r2, r1
 800068a:	63da      	str	r2, [r3, #60]	; 0x3c
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_MspInit+0x50>)
 800068e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	055b      	lsls	r3, r3, #21
 8000694:	4013      	ands	r3, r2
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800069a:	2008      	movs	r0, #8
 800069c:	f000 f956 	bl	800094c <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 80006a0:	2010      	movs	r0, #16
 80006a2:	f000 f953 	bl	800094c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	40021000 	.word	0x40021000

080006b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b091      	sub	sp, #68	; 0x44
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	232c      	movs	r3, #44	; 0x2c
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	0018      	movs	r0, r3
 80006c2:	2314      	movs	r3, #20
 80006c4:	001a      	movs	r2, r3
 80006c6:	2100      	movs	r1, #0
 80006c8:	f001 fd9e 	bl	8002208 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	2410      	movs	r4, #16
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	0018      	movs	r0, r3
 80006d2:	231c      	movs	r3, #28
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f001 fd96 	bl	8002208 <memset>
  if(huart->Instance==USART1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a23      	ldr	r2, [pc, #140]	; (8000770 <HAL_UART_MspInit+0xbc>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d13f      	bne.n	8000766 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2201      	movs	r2, #1
 80006ea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 ff15 	bl	8001524 <HAL_RCCEx_PeriphCLKConfig>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80006fe:	f7ff ffa9 	bl	8000654 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <HAL_UART_MspInit+0xc0>)
 8000704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_UART_MspInit+0xc0>)
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	01c9      	lsls	r1, r1, #7
 800070c:	430a      	orrs	r2, r1
 800070e:	641a      	str	r2, [r3, #64]	; 0x40
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_UART_MspInit+0xc0>)
 8000712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	01db      	lsls	r3, r3, #7
 8000718:	4013      	ands	r3, r2
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_UART_MspInit+0xc0>)
 8000720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_UART_MspInit+0xc0>)
 8000724:	2101      	movs	r1, #1
 8000726:	430a      	orrs	r2, r1
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_UART_MspInit+0xc0>)
 800072c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072e:	2201      	movs	r2, #1
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000736:	212c      	movs	r1, #44	; 0x2c
 8000738:	187b      	adds	r3, r7, r1
 800073a:	22c0      	movs	r2, #192	; 0xc0
 800073c:	00d2      	lsls	r2, r2, #3
 800073e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2202      	movs	r2, #2
 8000744:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2201      	movs	r2, #1
 8000756:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	187a      	adds	r2, r7, r1
 800075a:	23a0      	movs	r3, #160	; 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f000 f9b7 	bl	8000ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b011      	add	sp, #68	; 0x44
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40013800 	.word	0x40013800
 8000774:	40021000 	.word	0x40021000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079c:	f000 f89a 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <SystemInit+0x14>)
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	0512      	lsls	r2, r2, #20
 80007b2:	609a      	str	r2, [r3, #8]
#endif
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007c6:	e003      	b.n	80007d0 <LoopCopyDataInit>

080007c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80007ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007ce:	3104      	adds	r1, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <LoopForever+0xa>)
  ldr r3, =_edata
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <LoopForever+0xe>)
  adds r2, r0, r1
 80007d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007d8:	d3f6      	bcc.n	80007c8 <CopyDataInit>
  ldr r2, =_sbss
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <LoopForever+0x12>)
  b LoopFillZerobss
 80007dc:	e002      	b.n	80007e4 <LoopFillZerobss>

080007de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  str  r3, [r2]
 80007e0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e2:	3204      	adds	r2, #4

080007e4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <LoopForever+0x16>)
  cmp r2, r3
 80007e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007e8:	d3f9      	bcc.n	80007de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ea:	f7ff ffdd 	bl	80007a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007ee:	f001 fce7 	bl	80021c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f2:	f7ff fdff 	bl	80003f4 <main>

080007f6 <LoopForever>:

LoopForever:
    b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   r0, =_estack
 80007f8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80007fc:	080022d8 	.word	0x080022d8
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000804:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000808:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800080c:	200000bc 	.word	0x200000bc

08000810 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_IRQHandler>

08000812 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800081e:	2003      	movs	r0, #3
 8000820:	f000 f80e 	bl	8000840 <HAL_InitTick>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d003      	beq.n	8000830 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e001      	b.n	8000834 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000830:	f7ff ff16 	bl	8000660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000848:	230f      	movs	r3, #15
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <HAL_InitTick+0x88>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d02b      	beq.n	80008b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <HAL_InitTick+0x8c>)
 800085a:	681c      	ldr	r4, [r3, #0]
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <HAL_InitTick+0x88>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	0019      	movs	r1, r3
 8000862:	23fa      	movs	r3, #250	; 0xfa
 8000864:	0098      	lsls	r0, r3, #2
 8000866:	f7ff fc4f 	bl	8000108 <__udivsi3>
 800086a:	0003      	movs	r3, r0
 800086c:	0019      	movs	r1, r3
 800086e:	0020      	movs	r0, r4
 8000870:	f7ff fc4a 	bl	8000108 <__udivsi3>
 8000874:	0003      	movs	r3, r0
 8000876:	0018      	movs	r0, r3
 8000878:	f000 f91f 	bl	8000aba <HAL_SYSTICK_Config>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d112      	bne.n	80008a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d80a      	bhi.n	800089c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	2301      	movs	r3, #1
 800088a:	425b      	negs	r3, r3
 800088c:	2200      	movs	r2, #0
 800088e:	0018      	movs	r0, r3
 8000890:	f000 f8fe 	bl	8000a90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_InitTick+0x90>)
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	e00d      	b.n	80008b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800089c:	230f      	movs	r3, #15
 800089e:	18fb      	adds	r3, r7, r3
 80008a0:	2201      	movs	r2, #1
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	e008      	b.n	80008b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008a6:	230f      	movs	r3, #15
 80008a8:	18fb      	adds	r3, r7, r3
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e003      	b.n	80008b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008b0:	230f      	movs	r3, #15
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008b8:	230f      	movs	r3, #15
 80008ba:	18fb      	adds	r3, r7, r3
 80008bc:	781b      	ldrb	r3, [r3, #0]
}
 80008be:	0018      	movs	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b005      	add	sp, #20
 80008c4:	bd90      	pop	{r4, r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000004 	.word	0x20000004

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <HAL_IncTick+0x18>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <HAL_IncTick+0x1c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	18d2      	adds	r2, r2, r3
 80008e2:	4b02      	ldr	r3, [pc, #8]	; (80008ec <HAL_IncTick+0x18>)
 80008e4:	601a      	str	r2, [r3, #0]
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200000b8 	.word	0x200000b8
 80008f0:	20000008 	.word	0x20000008

080008f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  return uwTick;
 80008f8:	4b02      	ldr	r3, [pc, #8]	; (8000904 <HAL_GetTick+0x10>)
 80008fa:	681b      	ldr	r3, [r3, #0]
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	200000b8 	.word	0x200000b8

08000908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000910:	f7ff fff0 	bl	80008f4 <HAL_GetTick>
 8000914:	0003      	movs	r3, r0
 8000916:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	d004      	beq.n	800092c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_Delay+0x40>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	18d3      	adds	r3, r2, r3
 800092a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	f7ff ffe1 	bl	80008f4 <HAL_GetTick>
 8000932:	0002      	movs	r2, r0
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	429a      	cmp	r2, r3
 800093c:	d8f7      	bhi.n	800092e <HAL_Delay+0x26>
  {
  }
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b004      	add	sp, #16
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000008 	.word	0x20000008

0800094c <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000956:	6819      	ldr	r1, [r3, #0]
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <HAL_SYSCFG_EnableRemap+0x1c>)
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	430a      	orrs	r2, r1
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40010000 	.word	0x40010000

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	0002      	movs	r2, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b7f      	cmp	r3, #127	; 0x7f
 8000980:	d828      	bhi.n	80009d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000982:	4a2f      	ldr	r2, [pc, #188]	; (8000a40 <__NVIC_SetPriority+0xd4>)
 8000984:	1dfb      	adds	r3, r7, #7
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b25b      	sxtb	r3, r3
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	33c0      	adds	r3, #192	; 0xc0
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	589b      	ldr	r3, [r3, r2]
 8000992:	1dfa      	adds	r2, r7, #7
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	0011      	movs	r1, r2
 8000998:	2203      	movs	r2, #3
 800099a:	400a      	ands	r2, r1
 800099c:	00d2      	lsls	r2, r2, #3
 800099e:	21ff      	movs	r1, #255	; 0xff
 80009a0:	4091      	lsls	r1, r2
 80009a2:	000a      	movs	r2, r1
 80009a4:	43d2      	mvns	r2, r2
 80009a6:	401a      	ands	r2, r3
 80009a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	22ff      	movs	r2, #255	; 0xff
 80009b0:	401a      	ands	r2, r3
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	0018      	movs	r0, r3
 80009b8:	2303      	movs	r3, #3
 80009ba:	4003      	ands	r3, r0
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c0:	481f      	ldr	r0, [pc, #124]	; (8000a40 <__NVIC_SetPriority+0xd4>)
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	430a      	orrs	r2, r1
 80009cc:	33c0      	adds	r3, #192	; 0xc0
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009d2:	e031      	b.n	8000a38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <__NVIC_SetPriority+0xd8>)
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	0019      	movs	r1, r3
 80009dc:	230f      	movs	r3, #15
 80009de:	400b      	ands	r3, r1
 80009e0:	3b08      	subs	r3, #8
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	3306      	adds	r3, #6
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	18d3      	adds	r3, r2, r3
 80009ea:	3304      	adds	r3, #4
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	1dfa      	adds	r2, r7, #7
 80009f0:	7812      	ldrb	r2, [r2, #0]
 80009f2:	0011      	movs	r1, r2
 80009f4:	2203      	movs	r2, #3
 80009f6:	400a      	ands	r2, r1
 80009f8:	00d2      	lsls	r2, r2, #3
 80009fa:	21ff      	movs	r1, #255	; 0xff
 80009fc:	4091      	lsls	r1, r2
 80009fe:	000a      	movs	r2, r1
 8000a00:	43d2      	mvns	r2, r2
 8000a02:	401a      	ands	r2, r3
 8000a04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	019b      	lsls	r3, r3, #6
 8000a0a:	22ff      	movs	r2, #255	; 0xff
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0018      	movs	r0, r3
 8000a14:	2303      	movs	r3, #3
 8000a16:	4003      	ands	r3, r0
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <__NVIC_SetPriority+0xd8>)
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	001c      	movs	r4, r3
 8000a24:	230f      	movs	r3, #15
 8000a26:	4023      	ands	r3, r4
 8000a28:	3b08      	subs	r3, #8
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	3306      	adds	r3, #6
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	18c3      	adds	r3, r0, r3
 8000a34:	3304      	adds	r3, #4
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b003      	add	sp, #12
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	045b      	lsls	r3, r3, #17
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d301      	bcc.n	8000a60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e010      	b.n	8000a82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <SysTick_Config+0x44>)
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	3a01      	subs	r2, #1
 8000a66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a68:	2301      	movs	r3, #1
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff ff7c 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x44>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x44>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	0018      	movs	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	1c02      	adds	r2, r0, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff ff5d 	bl	800096c <__NVIC_SetPriority>
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff ffbf 	bl	8000a48 <SysTick_Config>
 8000aca:	0003      	movs	r3, r0
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000ae2:	e14d      	b.n	8000d80 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2101      	movs	r1, #1
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4091      	lsls	r1, r2
 8000aee:	000a      	movs	r2, r1
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d100      	bne.n	8000afc <HAL_GPIO_Init+0x28>
 8000afa:	e13e      	b.n	8000d7a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x38>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b12      	cmp	r3, #18
 8000b0a:	d125      	bne.n	8000b58 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	08da      	lsrs	r2, r3, #3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3208      	adds	r2, #8
 8000b14:	0092      	lsls	r2, r2, #2
 8000b16:	58d3      	ldr	r3, [r2, r3]
 8000b18:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	4013      	ands	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	220f      	movs	r2, #15
 8000b24:	409a      	lsls	r2, r3
 8000b26:	0013      	movs	r3, r2
 8000b28:	43da      	mvns	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	220f      	movs	r2, #15
 8000b36:	401a      	ands	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	2107      	movs	r1, #7
 8000b3c:	400b      	ands	r3, r1
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	409a      	lsls	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	08da      	lsrs	r2, r3, #3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3208      	adds	r2, #8
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	6979      	ldr	r1, [r7, #20]
 8000b56:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	2203      	movs	r2, #3
 8000b64:	409a      	lsls	r2, r3
 8000b66:	0013      	movs	r3, r2
 8000b68:	43da      	mvns	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2203      	movs	r2, #3
 8000b76:	401a      	ands	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	409a      	lsls	r2, r3
 8000b7e:	0013      	movs	r3, r2
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d00b      	beq.n	8000bac <HAL_GPIO_Init+0xd8>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d007      	beq.n	8000bac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba0:	2b11      	cmp	r3, #17
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b12      	cmp	r3, #18
 8000baa:	d130      	bne.n	8000c0e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	0013      	movs	r3, r2
 8000bbc:	43da      	mvns	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	409a      	lsls	r2, r3
 8000bce:	0013      	movs	r3, r2
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be2:	2201      	movs	r2, #1
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	43da      	mvns	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d017      	beq.n	8000c46 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	43da      	mvns	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	055b      	lsls	r3, r3, #21
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d100      	bne.n	8000c54 <HAL_GPIO_Init+0x180>
 8000c52:	e092      	b.n	8000d7a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000c54:	4a50      	ldr	r2, [pc, #320]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	3318      	adds	r3, #24
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	589b      	ldr	r3, [r3, r2]
 8000c60:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	2203      	movs	r2, #3
 8000c66:	4013      	ands	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	409a      	lsls	r2, r3
 8000c6e:	0013      	movs	r3, r2
 8000c70:	43da      	mvns	r2, r3
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	4013      	ands	r3, r2
 8000c76:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d013      	beq.n	8000caa <HAL_GPIO_Init+0x1d6>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a45      	ldr	r2, [pc, #276]	; (8000d9c <HAL_GPIO_Init+0x2c8>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d00d      	beq.n	8000ca6 <HAL_GPIO_Init+0x1d2>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a44      	ldr	r2, [pc, #272]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d007      	beq.n	8000ca2 <HAL_GPIO_Init+0x1ce>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a43      	ldr	r2, [pc, #268]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d101      	bne.n	8000c9e <HAL_GPIO_Init+0x1ca>
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x1d8>
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	e004      	b.n	8000cac <HAL_GPIO_Init+0x1d8>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e002      	b.n	8000cac <HAL_GPIO_Init+0x1d8>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <HAL_GPIO_Init+0x1d8>
 8000caa:	2300      	movs	r3, #0
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	2103      	movs	r1, #3
 8000cb0:	400a      	ands	r2, r1
 8000cb2:	00d2      	lsls	r2, r2, #3
 8000cb4:	4093      	lsls	r3, r2
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000cbc:	4936      	ldr	r1, [pc, #216]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	3318      	adds	r3, #24
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000cca:	4a33      	ldr	r2, [pc, #204]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	58d3      	ldr	r3, [r2, r3]
 8000cd0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	43da      	mvns	r2, r3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	025b      	lsls	r3, r3, #9
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000cf0:	4929      	ldr	r1, [pc, #164]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000cf8:	4a27      	ldr	r2, [pc, #156]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000cfa:	2384      	movs	r3, #132	; 0x84
 8000cfc:	58d3      	ldr	r3, [r2, r3]
 8000cfe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43da      	mvns	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	4013      	ands	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	029b      	lsls	r3, r3, #10
 8000d12:	4013      	ands	r3, r2
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000d1e:	491e      	ldr	r1, [pc, #120]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000d20:	2284      	movs	r2, #132	; 0x84
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	4013      	ands	r3, r2
 8000d34:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	035b      	lsls	r3, r3, #13
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	43da      	mvns	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	039b      	lsls	r3, r3, #14
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	40da      	lsrs	r2, r3
 8000d88:	1e13      	subs	r3, r2, #0
 8000d8a:	d000      	beq.n	8000d8e <HAL_GPIO_Init+0x2ba>
 8000d8c:	e6aa      	b.n	8000ae4 <HAL_GPIO_Init+0x10>
  }
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b006      	add	sp, #24
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021800 	.word	0x40021800
 8000d9c:	50000400 	.word	0x50000400
 8000da0:	50000800 	.word	0x50000800
 8000da4:	50001400 	.word	0x50001400

08000da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	000a      	movs	r2, r1
 8000db2:	1cbb      	adds	r3, r7, #2
 8000db4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	1cba      	adds	r2, r7, #2
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	d004      	beq.n	8000dcc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e003      	b.n	8000dd4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b004      	add	sp, #16
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	0008      	movs	r0, r1
 8000dec:	0011      	movs	r1, r2
 8000dee:	1cbb      	adds	r3, r7, #2
 8000df0:	1c02      	adds	r2, r0, #0
 8000df2:	801a      	strh	r2, [r3, #0]
 8000df4:	1c7b      	adds	r3, r7, #1
 8000df6:	1c0a      	adds	r2, r1, #0
 8000df8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dfa:	1c7b      	adds	r3, r7, #1
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d004      	beq.n	8000e0c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e02:	1cbb      	adds	r3, r7, #2
 8000e04:	881a      	ldrh	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e0a:	e003      	b.n	8000e14 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e0c:	1cbb      	adds	r3, r7, #2
 8000e0e:	881a      	ldrh	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	000a      	movs	r2, r1
 8000e26:	1cbb      	adds	r3, r7, #2
 8000e28:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e30:	1cbb      	adds	r3, r7, #2
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4013      	ands	r3, r2
 8000e38:	041a      	lsls	r2, r3, #16
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	1cb9      	adds	r1, r7, #2
 8000e40:	8809      	ldrh	r1, [r1, #0]
 8000e42:	400b      	ands	r3, r1
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	619a      	str	r2, [r3, #24]
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e1e5      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d100      	bne.n	8000e72 <HAL_RCC_OscConfig+0x1e>
 8000e70:	e06f      	b.n	8000f52 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e72:	4bc4      	ldr	r3, [pc, #784]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2238      	movs	r2, #56	; 0x38
 8000e78:	4013      	ands	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d10b      	bne.n	8000e9a <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e82:	4bc0      	ldr	r3, [pc, #768]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	029b      	lsls	r3, r3, #10
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d061      	beq.n	8000f52 <HAL_RCC_OscConfig+0xfe>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d15d      	bne.n	8000f52 <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e1cb      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	025b      	lsls	r3, r3, #9
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d107      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x62>
 8000ea6:	4bb7      	ldr	r3, [pc, #732]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4bb6      	ldr	r3, [pc, #728]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	0249      	lsls	r1, r1, #9
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e020      	b.n	8000ef8 <HAL_RCC_OscConfig+0xa4>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	23a0      	movs	r3, #160	; 0xa0
 8000ebc:	02db      	lsls	r3, r3, #11
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d10e      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x8c>
 8000ec2:	4bb0      	ldr	r3, [pc, #704]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4baf      	ldr	r3, [pc, #700]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	02c9      	lsls	r1, r1, #11
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	4bac      	ldr	r3, [pc, #688]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4bab      	ldr	r3, [pc, #684]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	0249      	lsls	r1, r1, #9
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	e00b      	b.n	8000ef8 <HAL_RCC_OscConfig+0xa4>
 8000ee0:	4ba8      	ldr	r3, [pc, #672]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4ba7      	ldr	r3, [pc, #668]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	49a8      	ldr	r1, [pc, #672]	; (8001188 <HAL_RCC_OscConfig+0x334>)
 8000ee8:	400a      	ands	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	4ba5      	ldr	r3, [pc, #660]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4ba4      	ldr	r3, [pc, #656]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ef2:	49a6      	ldr	r1, [pc, #664]	; (800118c <HAL_RCC_OscConfig+0x338>)
 8000ef4:	400a      	ands	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d014      	beq.n	8000f2a <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f00:	f7ff fcf8 	bl	80008f4 <HAL_GetTick>
 8000f04:	0003      	movs	r3, r0
 8000f06:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fcf3 	bl	80008f4 <HAL_GetTick>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b64      	cmp	r3, #100	; 0x64
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e18a      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f1c:	4b99      	ldr	r3, [pc, #612]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	029b      	lsls	r3, r3, #10
 8000f24:	4013      	ands	r3, r2
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0xb6>
 8000f28:	e013      	b.n	8000f52 <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fce3 	bl	80008f4 <HAL_GetTick>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fcde 	bl	80008f4 <HAL_GetTick>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	; 0x64
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e175      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f46:	4b8f      	ldr	r3, [pc, #572]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	029b      	lsls	r3, r3, #10
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2202      	movs	r2, #2
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d100      	bne.n	8000f5e <HAL_RCC_OscConfig+0x10a>
 8000f5c:	e08c      	b.n	8001078 <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f5e:	4b89      	ldr	r3, [pc, #548]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2238      	movs	r2, #56	; 0x38
 8000f64:	4013      	ands	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d135      	bne.n	8000fda <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f6e:	4b85      	ldr	r3, [pc, #532]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	4013      	ands	r3, r2
 8000f78:	d005      	beq.n	8000f86 <HAL_RCC_OscConfig+0x132>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e155      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f86:	4b7f      	ldr	r3, [pc, #508]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a81      	ldr	r2, [pc, #516]	; (8001190 <HAL_RCC_OscConfig+0x33c>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	0019      	movs	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	021a      	lsls	r2, r3, #8
 8000f96:	4b7b      	ldr	r3, [pc, #492]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d112      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fa2:	4b78      	ldr	r3, [pc, #480]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a7b      	ldr	r2, [pc, #492]	; (8001194 <HAL_RCC_OscConfig+0x340>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	0019      	movs	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	4b74      	ldr	r3, [pc, #464]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fb6:	4b73      	ldr	r3, [pc, #460]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	0adb      	lsrs	r3, r3, #11
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	4a75      	ldr	r2, [pc, #468]	; (8001198 <HAL_RCC_OscConfig+0x344>)
 8000fc2:	40da      	lsrs	r2, r3
 8000fc4:	4b75      	ldr	r3, [pc, #468]	; (800119c <HAL_RCC_OscConfig+0x348>)
 8000fc6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000fc8:	4b75      	ldr	r3, [pc, #468]	; (80011a0 <HAL_RCC_OscConfig+0x34c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff fc37 	bl	8000840 <HAL_InitTick>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d050      	beq.n	8001078 <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e12b      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d030      	beq.n	8001044 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fe2:	4b68      	ldr	r3, [pc, #416]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a6b      	ldr	r2, [pc, #428]	; (8001194 <HAL_RCC_OscConfig+0x340>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	0019      	movs	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	4b64      	ldr	r3, [pc, #400]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000ff6:	4b63      	ldr	r3, [pc, #396]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b62      	ldr	r3, [pc, #392]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	0049      	lsls	r1, r1, #1
 8001000:	430a      	orrs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001004:	f7ff fc76 	bl	80008f4 <HAL_GetTick>
 8001008:	0003      	movs	r3, r0
 800100a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fc71 	bl	80008f4 <HAL_GetTick>
 8001012:	0002      	movs	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e108      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001020:	4b58      	ldr	r3, [pc, #352]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4013      	ands	r3, r2
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102c:	4b55      	ldr	r3, [pc, #340]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a57      	ldr	r2, [pc, #348]	; (8001190 <HAL_RCC_OscConfig+0x33c>)
 8001032:	4013      	ands	r3, r2
 8001034:	0019      	movs	r1, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	021a      	lsls	r2, r3, #8
 800103c:	4b51      	ldr	r3, [pc, #324]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 800103e:	430a      	orrs	r2, r1
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	e019      	b.n	8001078 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001044:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b4e      	ldr	r3, [pc, #312]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 800104a:	4956      	ldr	r1, [pc, #344]	; (80011a4 <HAL_RCC_OscConfig+0x350>)
 800104c:	400a      	ands	r2, r1
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fc50 	bl	80008f4 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105a:	f7ff fc4b 	bl	80008f4 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e0e2      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800106c:	4b45      	ldr	r3, [pc, #276]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4013      	ands	r3, r2
 8001076:	d1f0      	bne.n	800105a <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2208      	movs	r2, #8
 800107e:	4013      	ands	r3, r2
 8001080:	d047      	beq.n	8001112 <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001082:	4b40      	ldr	r3, [pc, #256]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2238      	movs	r2, #56	; 0x38
 8001088:	4013      	ands	r3, r2
 800108a:	2b18      	cmp	r3, #24
 800108c:	d10a      	bne.n	80010a4 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	2202      	movs	r2, #2
 8001094:	4013      	ands	r3, r2
 8001096:	d03c      	beq.n	8001112 <HAL_RCC_OscConfig+0x2be>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d138      	bne.n	8001112 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0c6      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d019      	beq.n	80010e0 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010ac:	4b35      	ldr	r3, [pc, #212]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 80010ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010b0:	4b34      	ldr	r3, [pc, #208]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	430a      	orrs	r2, r1
 80010b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b8:	f7ff fc1c 	bl	80008f4 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c2:	f7ff fc17 	bl	80008f4 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e0ae      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 80010d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d8:	2202      	movs	r2, #2
 80010da:	4013      	ands	r3, r2
 80010dc:	d0f1      	beq.n	80010c2 <HAL_RCC_OscConfig+0x26e>
 80010de:	e018      	b.n	8001112 <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 80010e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 80010e6:	2101      	movs	r1, #1
 80010e8:	438a      	bics	r2, r1
 80010ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ec:	f7ff fc02 	bl	80008f4 <HAL_GetTick>
 80010f0:	0003      	movs	r3, r0
 80010f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f6:	f7ff fbfd 	bl	80008f4 <HAL_GetTick>
 80010fa:	0002      	movs	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e094      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 800110a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110c:	2202      	movs	r2, #2
 800110e:	4013      	ands	r3, r2
 8001110:	d1f1      	bne.n	80010f6 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2204      	movs	r2, #4
 8001118:	4013      	ands	r3, r2
 800111a:	d100      	bne.n	800111e <HAL_RCC_OscConfig+0x2ca>
 800111c:	e088      	b.n	8001230 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111e:	230f      	movs	r3, #15
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2238      	movs	r2, #56	; 0x38
 800112c:	4013      	ands	r3, r2
 800112e:	2b20      	cmp	r3, #32
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	2202      	movs	r2, #2
 8001138:	4013      	ands	r3, r2
 800113a:	d100      	bne.n	800113e <HAL_RCC_OscConfig+0x2ea>
 800113c:	e078      	b.n	8001230 <HAL_RCC_OscConfig+0x3dc>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d000      	beq.n	8001148 <HAL_RCC_OscConfig+0x2f4>
 8001146:	e073      	b.n	8001230 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e072      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d106      	bne.n	8001162 <HAL_RCC_OscConfig+0x30e>
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8001156:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 800115a:	2101      	movs	r1, #1
 800115c:	430a      	orrs	r2, r1
 800115e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001160:	e02e      	b.n	80011c0 <HAL_RCC_OscConfig+0x36c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d11e      	bne.n	80011a8 <HAL_RCC_OscConfig+0x354>
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 800116c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8001170:	2104      	movs	r1, #4
 8001172:	430a      	orrs	r2, r1
 8001174:	65da      	str	r2, [r3, #92]	; 0x5c
 8001176:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 8001178:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800117a:	4b02      	ldr	r3, [pc, #8]	; (8001184 <HAL_RCC_OscConfig+0x330>)
 800117c:	2101      	movs	r1, #1
 800117e:	430a      	orrs	r2, r1
 8001180:	65da      	str	r2, [r3, #92]	; 0x5c
 8001182:	e01d      	b.n	80011c0 <HAL_RCC_OscConfig+0x36c>
 8001184:	40021000 	.word	0x40021000
 8001188:	fffeffff 	.word	0xfffeffff
 800118c:	fffbffff 	.word	0xfffbffff
 8001190:	ffff80ff 	.word	0xffff80ff
 8001194:	ffffc7ff 	.word	0xffffc7ff
 8001198:	02dc6c00 	.word	0x02dc6c00
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000004 	.word	0x20000004
 80011a4:	fffffeff 	.word	0xfffffeff
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <HAL_RCC_OscConfig+0x3e8>)
 80011aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011ac:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_RCC_OscConfig+0x3e8>)
 80011ae:	2101      	movs	r1, #1
 80011b0:	438a      	bics	r2, r1
 80011b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_RCC_OscConfig+0x3e8>)
 80011b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_RCC_OscConfig+0x3e8>)
 80011ba:	2104      	movs	r1, #4
 80011bc:	438a      	bics	r2, r1
 80011be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d014      	beq.n	80011f2 <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fb94 	bl	80008f4 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80011d0:	e009      	b.n	80011e6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f7ff fb8f 	bl	80008f4 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_RCC_OscConfig+0x3ec>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e025      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_RCC_OscConfig+0x3e8>)
 80011e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ea:	2202      	movs	r2, #2
 80011ec:	4013      	ands	r3, r2
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x37e>
 80011f0:	e013      	b.n	800121a <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff fb7f 	bl	80008f4 <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80011fa:	e009      	b.n	8001210 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fc:	f7ff fb7a 	bl	80008f4 <HAL_GetTick>
 8001200:	0002      	movs	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_RCC_OscConfig+0x3ec>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e010      	b.n	8001232 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_RCC_OscConfig+0x3e8>)
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	2202      	movs	r2, #2
 8001216:	4013      	ands	r3, r2
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800121a:	230f      	movs	r3, #15
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d105      	bne.n	8001230 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_RCC_OscConfig+0x3e8>)
 8001226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_RCC_OscConfig+0x3e8>)
 800122a:	4906      	ldr	r1, [pc, #24]	; (8001244 <HAL_RCC_OscConfig+0x3f0>)
 800122c:	400a      	ands	r2, r1
 800122e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b006      	add	sp, #24
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	40021000 	.word	0x40021000
 8001240:	00001388 	.word	0x00001388
 8001244:	efffffff 	.word	0xefffffff

08001248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0e9      	b.n	8001430 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800125c:	4b76      	ldr	r3, [pc, #472]	; (8001438 <HAL_RCC_ClockConfig+0x1f0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2207      	movs	r2, #7
 8001262:	4013      	ands	r3, r2
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d91e      	bls.n	80012a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b73      	ldr	r3, [pc, #460]	; (8001438 <HAL_RCC_ClockConfig+0x1f0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2207      	movs	r2, #7
 8001270:	4393      	bics	r3, r2
 8001272:	0019      	movs	r1, r3
 8001274:	4b70      	ldr	r3, [pc, #448]	; (8001438 <HAL_RCC_ClockConfig+0x1f0>)
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800127c:	f7ff fb3a 	bl	80008f4 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001284:	e009      	b.n	800129a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001286:	f7ff fb35 	bl	80008f4 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	4a6a      	ldr	r2, [pc, #424]	; (800143c <HAL_RCC_ClockConfig+0x1f4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d901      	bls.n	800129a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e0ca      	b.n	8001430 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800129a:	4b67      	ldr	r3, [pc, #412]	; (8001438 <HAL_RCC_ClockConfig+0x1f0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2207      	movs	r2, #7
 80012a0:	4013      	ands	r3, r2
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d1ee      	bne.n	8001286 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2202      	movs	r2, #2
 80012ae:	4013      	ands	r3, r2
 80012b0:	d017      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2204      	movs	r2, #4
 80012b8:	4013      	ands	r3, r2
 80012ba:	d008      	beq.n	80012ce <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012bc:	4b60      	ldr	r3, [pc, #384]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a60      	ldr	r2, [pc, #384]	; (8001444 <HAL_RCC_ClockConfig+0x1fc>)
 80012c2:	401a      	ands	r2, r3
 80012c4:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 80012c6:	21b0      	movs	r1, #176	; 0xb0
 80012c8:	0109      	lsls	r1, r1, #4
 80012ca:	430a      	orrs	r2, r1
 80012cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ce:	4b5c      	ldr	r3, [pc, #368]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	4a5d      	ldr	r2, [pc, #372]	; (8001448 <HAL_RCC_ClockConfig+0x200>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	0019      	movs	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 80012de:	430a      	orrs	r2, r1
 80012e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2201      	movs	r2, #1
 80012e8:	4013      	ands	r3, r2
 80012ea:	d055      	beq.n	8001398 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80012ec:	4b54      	ldr	r3, [pc, #336]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	221c      	movs	r2, #28
 80012f2:	4393      	bics	r3, r2
 80012f4:	0019      	movs	r1, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 80012fc:	430a      	orrs	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d107      	bne.n	8001318 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001308:	4b4d      	ldr	r3, [pc, #308]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	029b      	lsls	r3, r3, #10
 8001310:	4013      	ands	r3, r2
 8001312:	d11f      	bne.n	8001354 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e08b      	b.n	8001430 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d107      	bne.n	8001330 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001320:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4013      	ands	r3, r2
 800132a:	d113      	bne.n	8001354 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e07f      	b.n	8001430 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d106      	bne.n	8001346 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001338:	4b41      	ldr	r3, [pc, #260]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 800133a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133c:	2202      	movs	r2, #2
 800133e:	4013      	ands	r3, r2
 8001340:	d108      	bne.n	8001354 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e074      	b.n	8001430 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001346:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d101      	bne.n	8001354 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e06d      	b.n	8001430 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001354:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2207      	movs	r2, #7
 800135a:	4393      	bics	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4b37      	ldr	r3, [pc, #220]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 8001364:	430a      	orrs	r2, r1
 8001366:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001368:	f7ff fac4 	bl	80008f4 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001370:	e009      	b.n	8001386 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001372:	f7ff fabf 	bl	80008f4 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	4a2f      	ldr	r2, [pc, #188]	; (800143c <HAL_RCC_ClockConfig+0x1f4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e054      	b.n	8001430 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001386:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2238      	movs	r2, #56	; 0x38
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	429a      	cmp	r2, r3
 8001396:	d1ec      	bne.n	8001372 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <HAL_RCC_ClockConfig+0x1f0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2207      	movs	r2, #7
 800139e:	4013      	ands	r3, r2
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d21e      	bcs.n	80013e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_RCC_ClockConfig+0x1f0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2207      	movs	r2, #7
 80013ac:	4393      	bics	r3, r2
 80013ae:	0019      	movs	r1, r3
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <HAL_RCC_ClockConfig+0x1f0>)
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013b8:	f7ff fa9c 	bl	80008f4 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013c0:	e009      	b.n	80013d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c2:	f7ff fa97 	bl	80008f4 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	4a1b      	ldr	r2, [pc, #108]	; (800143c <HAL_RCC_ClockConfig+0x1f4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e02c      	b.n	8001430 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_RCC_ClockConfig+0x1f0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2207      	movs	r2, #7
 80013dc:	4013      	ands	r3, r2
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d1ee      	bne.n	80013c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2204      	movs	r2, #4
 80013ea:	4013      	ands	r3, r2
 80013ec:	d009      	beq.n	8001402 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	4a16      	ldr	r2, [pc, #88]	; (800144c <HAL_RCC_ClockConfig+0x204>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	0019      	movs	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 80013fe:	430a      	orrs	r2, r1
 8001400:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001402:	f000 f82b 	bl	800145c <HAL_RCC_GetSysClockFreq>
 8001406:	0001      	movs	r1, r0
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_RCC_ClockConfig+0x1f8>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	220f      	movs	r2, #15
 8001410:	401a      	ands	r2, r3
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_RCC_ClockConfig+0x208>)
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	58d3      	ldr	r3, [r2, r3]
 8001418:	221f      	movs	r2, #31
 800141a:	4013      	ands	r3, r2
 800141c:	000a      	movs	r2, r1
 800141e:	40da      	lsrs	r2, r3
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_RCC_ClockConfig+0x20c>)
 8001422:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_RCC_ClockConfig+0x210>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff fa09 	bl	8000840 <HAL_InitTick>
 800142e:	0003      	movs	r3, r0
}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40022000 	.word	0x40022000
 800143c:	00001388 	.word	0x00001388
 8001440:	40021000 	.word	0x40021000
 8001444:	ffff84ff 	.word	0xffff84ff
 8001448:	fffff0ff 	.word	0xfffff0ff
 800144c:	ffff8fff 	.word	0xffff8fff
 8001450:	08002248 	.word	0x08002248
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2238      	movs	r2, #56	; 0x38
 8001468:	4013      	ands	r3, r2
 800146a:	d10f      	bne.n	800148c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x78>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	0adb      	lsrs	r3, r3, #11
 8001472:	2207      	movs	r2, #7
 8001474:	4013      	ands	r3, r2
 8001476:	2201      	movs	r2, #1
 8001478:	409a      	lsls	r2, r3
 800147a:	0013      	movs	r3, r2
 800147c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	4815      	ldr	r0, [pc, #84]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001482:	f7fe fe41 	bl	8000108 <__udivsi3>
 8001486:	0003      	movs	r3, r0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	e01e      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x78>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2238      	movs	r2, #56	; 0x38
 8001492:	4013      	ands	r3, r2
 8001494:	2b08      	cmp	r3, #8
 8001496:	d102      	bne.n	800149e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_RCC_GetSysClockFreq+0x80>)
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	e015      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x78>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2238      	movs	r2, #56	; 0x38
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b20      	cmp	r3, #32
 80014a8:	d103      	bne.n	80014b2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	e00b      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x78>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2238      	movs	r2, #56	; 0x38
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b18      	cmp	r3, #24
 80014bc:	d103      	bne.n	80014c6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80014be:	23fa      	movs	r3, #250	; 0xfa
 80014c0:	01db      	lsls	r3, r3, #7
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	e001      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80014ca:	687b      	ldr	r3, [r7, #4]
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b002      	add	sp, #8
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	02dc6c00 	.word	0x02dc6c00
 80014dc:	007a1200 	.word	0x007a1200

080014e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	20000000 	.word	0x20000000

080014f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80014f8:	f7ff fff2 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 80014fc:	0001      	movs	r1, r0
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	0b1b      	lsrs	r3, r3, #12
 8001504:	2207      	movs	r2, #7
 8001506:	401a      	ands	r2, r3
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	58d3      	ldr	r3, [r2, r3]
 800150e:	221f      	movs	r2, #31
 8001510:	4013      	ands	r3, r2
 8001512:	40d9      	lsrs	r1, r3
 8001514:	000b      	movs	r3, r1
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	08002288 	.word	0x08002288

08001524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800152c:	2313      	movs	r3, #19
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001534:	2312      	movs	r3, #18
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	029b      	lsls	r3, r3, #10
 8001544:	4013      	ands	r3, r2
 8001546:	d100      	bne.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001548:	e079      	b.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154a:	2011      	movs	r0, #17
 800154c:	183b      	adds	r3, r7, r0
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	055b      	lsls	r3, r3, #21
 800155a:	4013      	ands	r3, r2
 800155c:	d110      	bne.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b61      	ldr	r3, [pc, #388]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001562:	4b60      	ldr	r3, [pc, #384]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0549      	lsls	r1, r1, #21
 8001568:	430a      	orrs	r2, r1
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c
 800156c:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800156e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	055b      	lsls	r3, r3, #21
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157a:	183b      	adds	r3, r7, r0
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001580:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001582:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001584:	23c0      	movs	r3, #192	; 0xc0
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4013      	ands	r3, r2
 800158a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d019      	beq.n	80015c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	429a      	cmp	r2, r3
 800159a:	d014      	beq.n	80015c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800159c:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	4a51      	ldr	r2, [pc, #324]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015a6:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015aa:	4b4e      	ldr	r3, [pc, #312]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0249      	lsls	r1, r1, #9
 80015b0:	430a      	orrs	r2, r1
 80015b2:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015b4:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015b8:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015ba:	494c      	ldr	r1, [pc, #304]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80015bc:	400a      	ands	r2, r1
 80015be:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80015c0:	4b48      	ldr	r3, [pc, #288]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2201      	movs	r2, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	d016      	beq.n	80015fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff f991 	bl	80008f4 <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015d6:	e00c      	b.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff f98c 	bl	80008f4 <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	4a43      	ldr	r2, [pc, #268]	; (80016f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d904      	bls.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80015e8:	2313      	movs	r3, #19
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	2203      	movs	r2, #3
 80015ee:	701a      	strb	r2, [r3, #0]
          break;
 80015f0:	e004      	b.n	80015fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015f2:	4b3c      	ldr	r3, [pc, #240]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	2202      	movs	r2, #2
 80015f8:	4013      	ands	r3, r2
 80015fa:	d0ed      	beq.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80015fc:	2313      	movs	r3, #19
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10a      	bne.n	800161c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001606:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	4a37      	ldr	r2, [pc, #220]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800160c:	4013      	ands	r3, r2
 800160e:	0019      	movs	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699a      	ldr	r2, [r3, #24]
 8001614:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001616:	430a      	orrs	r2, r1
 8001618:	65da      	str	r2, [r3, #92]	; 0x5c
 800161a:	e005      	b.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800161c:	2312      	movs	r3, #18
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	2213      	movs	r2, #19
 8001622:	18ba      	adds	r2, r7, r2
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001628:	2311      	movs	r3, #17
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d105      	bne.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001636:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001638:	492e      	ldr	r1, [pc, #184]	; (80016f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800163a:	400a      	ands	r2, r1
 800163c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2201      	movs	r2, #1
 8001644:	4013      	ands	r3, r2
 8001646:	d009      	beq.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164c:	2203      	movs	r2, #3
 800164e:	4393      	bics	r3, r2
 8001650:	0019      	movs	r1, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001658:	430a      	orrs	r2, r1
 800165a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2240      	movs	r2, #64	; 0x40
 8001662:	4013      	ands	r3, r2
 8001664:	d009      	beq.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166a:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800166c:	4013      	ands	r3, r2
 800166e:	0019      	movs	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001676:	430a      	orrs	r2, r1
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	01db      	lsls	r3, r3, #7
 8001682:	4013      	ands	r3, r2
 8001684:	d008      	beq.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	0899      	lsrs	r1, r3, #2
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001694:	430a      	orrs	r2, r1
 8001696:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4013      	ands	r3, r2
 80016a2:	d009      	beq.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016b4:	430a      	orrs	r2, r1
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da09      	bge.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	22e0      	movs	r2, #224	; 0xe0
 80016c6:	4393      	bics	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]
  }
  return status;
 80016d4:	2312      	movs	r3, #18
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	781b      	ldrb	r3, [r3, #0]
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	b006      	add	sp, #24
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	40021000 	.word	0x40021000
 80016e8:	fffffcff 	.word	0xfffffcff
 80016ec:	fffeffff 	.word	0xfffeffff
 80016f0:	00001388 	.word	0x00001388
 80016f4:	efffffff 	.word	0xefffffff
 80016f8:	ffffcfff 	.word	0xffffcfff
 80016fc:	ffff3fff 	.word	0xffff3fff

08001700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e046      	b.n	80017a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2284      	movs	r2, #132	; 0x84
 8001716:	589b      	ldr	r3, [r3, r2]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d107      	bne.n	800172c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2280      	movs	r2, #128	; 0x80
 8001720:	2100      	movs	r1, #0
 8001722:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	0018      	movs	r0, r3
 8001728:	f7fe ffc4 	bl	80006b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2284      	movs	r2, #132	; 0x84
 8001730:	2124      	movs	r1, #36	; 0x24
 8001732:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2101      	movs	r1, #1
 8001740:	438a      	bics	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 f8dc 	bl	8001904 <UART_SetConfig>
 800174c:	0003      	movs	r3, r0
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e024      	b.n	80017a0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f000 fa4d 	bl	8001c00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	490d      	ldr	r1, [pc, #52]	; (80017a8 <HAL_UART_Init+0xa8>)
 8001772:	400a      	ands	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	212a      	movs	r1, #42	; 0x2a
 8001782:	438a      	bics	r2, r1
 8001784:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	0018      	movs	r0, r3
 800179a:	f000 fae5 	bl	8001d68 <UART_CheckIdleState>
 800179e:	0003      	movs	r3, r0
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	ffffb7ff 	.word	0xffffb7ff

080017ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	1dbb      	adds	r3, r7, #6
 80017ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2284      	movs	r2, #132	; 0x84
 80017c0:	589b      	ldr	r3, [r3, r2]
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	d000      	beq.n	80017c8 <HAL_UART_Transmit+0x1c>
 80017c6:	e097      	b.n	80018f8 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_UART_Transmit+0x2a>
 80017ce:	1dbb      	adds	r3, r7, #6
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e08f      	b.n	80018fa <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	015b      	lsls	r3, r3, #5
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d109      	bne.n	80017fa <HAL_UART_Transmit+0x4e>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2201      	movs	r2, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	d001      	beq.n	80017fa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	5c9b      	ldrb	r3, [r3, r2]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_UART_Transmit+0x5c>
 8001804:	2302      	movs	r3, #2
 8001806:	e078      	b.n	80018fa <HAL_UART_Transmit+0x14e>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	2101      	movs	r1, #1
 800180e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	228c      	movs	r2, #140	; 0x8c
 8001814:	2100      	movs	r1, #0
 8001816:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2284      	movs	r2, #132	; 0x84
 800181c:	2121      	movs	r1, #33	; 0x21
 800181e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001820:	f7ff f868 	bl	80008f4 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1dba      	adds	r2, r7, #6
 800182c:	2154      	movs	r1, #84	; 0x54
 800182e:	8812      	ldrh	r2, [r2, #0]
 8001830:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1dba      	adds	r2, r7, #6
 8001836:	2156      	movs	r1, #86	; 0x56
 8001838:	8812      	ldrh	r2, [r2, #0]
 800183a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	429a      	cmp	r2, r3
 8001846:	d108      	bne.n	800185a <HAL_UART_Transmit+0xae>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d104      	bne.n	800185a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	e003      	b.n	8001862 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	2100      	movs	r1, #0
 8001868:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800186a:	e02c      	b.n	80018c6 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	0013      	movs	r3, r2
 8001876:	2200      	movs	r2, #0
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	f000 fabf 	bl	8001dfc <UART_WaitOnFlagUntilTimeout>
 800187e:	1e03      	subs	r3, r0, #0
 8001880:	d001      	beq.n	8001886 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e039      	b.n	80018fa <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10b      	bne.n	80018a4 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	001a      	movs	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	05d2      	lsls	r2, r2, #23
 8001898:	0dd2      	lsrs	r2, r2, #23
 800189a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	3302      	adds	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	e007      	b.n	80018b4 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2256      	movs	r2, #86	; 0x56
 80018b8:	5a9b      	ldrh	r3, [r3, r2]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3b01      	subs	r3, #1
 80018be:	b299      	uxth	r1, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2256      	movs	r2, #86	; 0x56
 80018c4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2256      	movs	r2, #86	; 0x56
 80018ca:	5a9b      	ldrh	r3, [r3, r2]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1cc      	bne.n	800186c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	0013      	movs	r3, r2
 80018dc:	2200      	movs	r2, #0
 80018de:	2140      	movs	r1, #64	; 0x40
 80018e0:	f000 fa8c 	bl	8001dfc <UART_WaitOnFlagUntilTimeout>
 80018e4:	1e03      	subs	r3, r0, #0
 80018e6:	d001      	beq.n	80018ec <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e006      	b.n	80018fa <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2284      	movs	r2, #132	; 0x84
 80018f0:	2120      	movs	r1, #32
 80018f2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e000      	b.n	80018fa <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80018f8:	2302      	movs	r3, #2
  }
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b008      	add	sp, #32
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800190c:	231e      	movs	r3, #30
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4aab      	ldr	r2, [pc, #684]	; (8001be0 <UART_SetConfig+0x2dc>)
 8001934:	4013      	ands	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4aa6      	ldr	r2, [pc, #664]	; (8001be4 <UART_SetConfig+0x2e0>)
 800194a:	4013      	ands	r3, r2
 800194c:	0019      	movs	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4313      	orrs	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a9d      	ldr	r2, [pc, #628]	; (8001be8 <UART_SetConfig+0x2e4>)
 8001972:	4013      	ands	r3, r2
 8001974:	0019      	movs	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	430a      	orrs	r2, r1
 800197e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	220f      	movs	r2, #15
 8001988:	4393      	bics	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a93      	ldr	r2, [pc, #588]	; (8001bec <UART_SetConfig+0x2e8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d127      	bne.n	80019f2 <UART_SetConfig+0xee>
 80019a2:	4b93      	ldr	r3, [pc, #588]	; (8001bf0 <UART_SetConfig+0x2ec>)
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	2203      	movs	r2, #3
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d017      	beq.n	80019de <UART_SetConfig+0xda>
 80019ae:	d81b      	bhi.n	80019e8 <UART_SetConfig+0xe4>
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d00a      	beq.n	80019ca <UART_SetConfig+0xc6>
 80019b4:	d818      	bhi.n	80019e8 <UART_SetConfig+0xe4>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <UART_SetConfig+0xbc>
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d00a      	beq.n	80019d4 <UART_SetConfig+0xd0>
 80019be:	e013      	b.n	80019e8 <UART_SetConfig+0xe4>
 80019c0:	231f      	movs	r3, #31
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	e021      	b.n	8001a0e <UART_SetConfig+0x10a>
 80019ca:	231f      	movs	r3, #31
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	2202      	movs	r2, #2
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	e01c      	b.n	8001a0e <UART_SetConfig+0x10a>
 80019d4:	231f      	movs	r3, #31
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	2204      	movs	r2, #4
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e017      	b.n	8001a0e <UART_SetConfig+0x10a>
 80019de:	231f      	movs	r3, #31
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	2208      	movs	r2, #8
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e012      	b.n	8001a0e <UART_SetConfig+0x10a>
 80019e8:	231f      	movs	r3, #31
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	2210      	movs	r2, #16
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	e00d      	b.n	8001a0e <UART_SetConfig+0x10a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7f      	ldr	r2, [pc, #508]	; (8001bf4 <UART_SetConfig+0x2f0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d104      	bne.n	8001a06 <UART_SetConfig+0x102>
 80019fc:	231f      	movs	r3, #31
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	e003      	b.n	8001a0e <UART_SetConfig+0x10a>
 8001a06:	231f      	movs	r3, #31
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	2210      	movs	r2, #16
 8001a0c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69da      	ldr	r2, [r3, #28]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d000      	beq.n	8001a1c <UART_SetConfig+0x118>
 8001a1a:	e06f      	b.n	8001afc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8001a1c:	231f      	movs	r3, #31
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d01f      	beq.n	8001a66 <UART_SetConfig+0x162>
 8001a26:	dc22      	bgt.n	8001a6e <UART_SetConfig+0x16a>
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d017      	beq.n	8001a5c <UART_SetConfig+0x158>
 8001a2c:	dc1f      	bgt.n	8001a6e <UART_SetConfig+0x16a>
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <UART_SetConfig+0x134>
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d005      	beq.n	8001a42 <UART_SetConfig+0x13e>
 8001a36:	e01a      	b.n	8001a6e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a38:	f7ff fd5c 	bl	80014f4 <HAL_RCC_GetPCLK1Freq>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	61bb      	str	r3, [r7, #24]
        break;
 8001a40:	e01c      	b.n	8001a7c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001a42:	4b6b      	ldr	r3, [pc, #428]	; (8001bf0 <UART_SetConfig+0x2ec>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2207      	movs	r2, #7
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	0019      	movs	r1, r3
 8001a50:	4869      	ldr	r0, [pc, #420]	; (8001bf8 <UART_SetConfig+0x2f4>)
 8001a52:	f7fe fb59 	bl	8000108 <__udivsi3>
 8001a56:	0003      	movs	r3, r0
 8001a58:	61bb      	str	r3, [r7, #24]
        break;
 8001a5a:	e00f      	b.n	8001a7c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001a5c:	f7ff fcfe 	bl	800145c <HAL_RCC_GetSysClockFreq>
 8001a60:	0003      	movs	r3, r0
 8001a62:	61bb      	str	r3, [r7, #24]
        break;
 8001a64:	e00a      	b.n	8001a7c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	61bb      	str	r3, [r7, #24]
        break;
 8001a6c:	e006      	b.n	8001a7c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001a72:	231e      	movs	r3, #30
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
        break;
 8001a7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d100      	bne.n	8001a84 <UART_SetConfig+0x180>
 8001a82:	e097      	b.n	8001bb4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a88:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <UART_SetConfig+0x2f8>)
 8001a8a:	0052      	lsls	r2, r2, #1
 8001a8c:	5ad3      	ldrh	r3, [r2, r3]
 8001a8e:	0019      	movs	r1, r3
 8001a90:	69b8      	ldr	r0, [r7, #24]
 8001a92:	f7fe fb39 	bl	8000108 <__udivsi3>
 8001a96:	0003      	movs	r3, r0
 8001a98:	005a      	lsls	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	085b      	lsrs	r3, r3, #1
 8001aa0:	18d2      	adds	r2, r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	0010      	movs	r0, r2
 8001aaa:	f7fe fb2d 	bl	8000108 <__udivsi3>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d91c      	bls.n	8001af2 <UART_SetConfig+0x1ee>
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	025b      	lsls	r3, r3, #9
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d217      	bcs.n	8001af2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	200e      	movs	r0, #14
 8001ac8:	183b      	adds	r3, r7, r0
 8001aca:	210f      	movs	r1, #15
 8001acc:	438a      	bics	r2, r1
 8001ace:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	2207      	movs	r2, #7
 8001ad8:	4013      	ands	r3, r2
 8001ada:	b299      	uxth	r1, r3
 8001adc:	183b      	adds	r3, r7, r0
 8001ade:	183a      	adds	r2, r7, r0
 8001ae0:	8812      	ldrh	r2, [r2, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	183a      	adds	r2, r7, r0
 8001aec:	8812      	ldrh	r2, [r2, #0]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	e060      	b.n	8001bb4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001af2:	231e      	movs	r3, #30
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e05b      	b.n	8001bb4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001afc:	231f      	movs	r3, #31
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d01f      	beq.n	8001b46 <UART_SetConfig+0x242>
 8001b06:	dc22      	bgt.n	8001b4e <UART_SetConfig+0x24a>
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d017      	beq.n	8001b3c <UART_SetConfig+0x238>
 8001b0c:	dc1f      	bgt.n	8001b4e <UART_SetConfig+0x24a>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <UART_SetConfig+0x214>
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d005      	beq.n	8001b22 <UART_SetConfig+0x21e>
 8001b16:	e01a      	b.n	8001b4e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b18:	f7ff fcec 	bl	80014f4 <HAL_RCC_GetPCLK1Freq>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	61bb      	str	r3, [r7, #24]
        break;
 8001b20:	e01c      	b.n	8001b5c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <UART_SetConfig+0x2ec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2207      	movs	r2, #7
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	0019      	movs	r1, r3
 8001b30:	4831      	ldr	r0, [pc, #196]	; (8001bf8 <UART_SetConfig+0x2f4>)
 8001b32:	f7fe fae9 	bl	8000108 <__udivsi3>
 8001b36:	0003      	movs	r3, r0
 8001b38:	61bb      	str	r3, [r7, #24]
        break;
 8001b3a:	e00f      	b.n	8001b5c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b3c:	f7ff fc8e 	bl	800145c <HAL_RCC_GetSysClockFreq>
 8001b40:	0003      	movs	r3, r0
 8001b42:	61bb      	str	r3, [r7, #24]
        break;
 8001b44:	e00a      	b.n	8001b5c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	61bb      	str	r3, [r7, #24]
        break;
 8001b4c:	e006      	b.n	8001b5c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001b52:	231e      	movs	r3, #30
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
        break;
 8001b5a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d028      	beq.n	8001bb4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b66:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <UART_SetConfig+0x2f8>)
 8001b68:	0052      	lsls	r2, r2, #1
 8001b6a:	5ad3      	ldrh	r3, [r2, r3]
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	69b8      	ldr	r0, [r7, #24]
 8001b70:	f7fe faca 	bl	8000108 <__udivsi3>
 8001b74:	0003      	movs	r3, r0
 8001b76:	001a      	movs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	18d2      	adds	r2, r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	0019      	movs	r1, r3
 8001b86:	0010      	movs	r0, r2
 8001b88:	f7fe fabe 	bl	8000108 <__udivsi3>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	d90a      	bls.n	8001bac <UART_SetConfig+0x2a8>
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	025b      	lsls	r3, r3, #9
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d205      	bcs.n	8001bac <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	e003      	b.n	8001bb4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001bac:	231e      	movs	r3, #30
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	226a      	movs	r2, #106	; 0x6a
 8001bb8:	2101      	movs	r1, #1
 8001bba:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2268      	movs	r2, #104	; 0x68
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8001bd0:	231e      	movs	r3, #30
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	781b      	ldrb	r3, [r3, #0]
}
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b008      	add	sp, #32
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	cfff69f3 	.word	0xcfff69f3
 8001be4:	ffffcfff 	.word	0xffffcfff
 8001be8:	11fff4ff 	.word	0x11fff4ff
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40004400 	.word	0x40004400
 8001bf8:	02dc6c00 	.word	0x02dc6c00
 8001bfc:	080022a8 	.word	0x080022a8

08001c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d00b      	beq.n	8001c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a4a      	ldr	r2, [pc, #296]	; (8001d44 <UART_AdvFeatureConfig+0x144>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	2202      	movs	r2, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d00b      	beq.n	8001c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4a43      	ldr	r2, [pc, #268]	; (8001d48 <UART_AdvFeatureConfig+0x148>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	2204      	movs	r2, #4
 8001c52:	4013      	ands	r3, r2
 8001c54:	d00b      	beq.n	8001c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a3b      	ldr	r2, [pc, #236]	; (8001d4c <UART_AdvFeatureConfig+0x14c>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	2208      	movs	r2, #8
 8001c74:	4013      	ands	r3, r2
 8001c76:	d00b      	beq.n	8001c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a34      	ldr	r2, [pc, #208]	; (8001d50 <UART_AdvFeatureConfig+0x150>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	2210      	movs	r2, #16
 8001c96:	4013      	ands	r3, r2
 8001c98:	d00b      	beq.n	8001cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a2c      	ldr	r2, [pc, #176]	; (8001d54 <UART_AdvFeatureConfig+0x154>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d00b      	beq.n	8001cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <UART_AdvFeatureConfig+0x158>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	2240      	movs	r2, #64	; 0x40
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d01d      	beq.n	8001d1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <UART_AdvFeatureConfig+0x15c>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	035b      	lsls	r3, r3, #13
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d10b      	bne.n	8001d1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <UART_AdvFeatureConfig+0x160>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	4013      	ands	r3, r2
 8001d22:	d00b      	beq.n	8001d3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <UART_AdvFeatureConfig+0x164>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
  }
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b002      	add	sp, #8
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	fffdffff 	.word	0xfffdffff
 8001d48:	fffeffff 	.word	0xfffeffff
 8001d4c:	fffbffff 	.word	0xfffbffff
 8001d50:	ffff7fff 	.word	0xffff7fff
 8001d54:	ffffefff 	.word	0xffffefff
 8001d58:	ffffdfff 	.word	0xffffdfff
 8001d5c:	ffefffff 	.word	0xffefffff
 8001d60:	ff9fffff 	.word	0xff9fffff
 8001d64:	fff7ffff 	.word	0xfff7ffff

08001d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	228c      	movs	r2, #140	; 0x8c
 8001d74:	2100      	movs	r1, #0
 8001d76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001d78:	f7fe fdbc 	bl	80008f4 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2208      	movs	r2, #8
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d10c      	bne.n	8001da8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	0391      	lsls	r1, r2, #14
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <UART_CheckIdleState+0x90>)
 8001d98:	9200      	str	r2, [sp, #0]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f000 f82e 	bl	8001dfc <UART_WaitOnFlagUntilTimeout>
 8001da0:	1e03      	subs	r3, r0, #0
 8001da2:	d001      	beq.n	8001da8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e023      	b.n	8001df0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2204      	movs	r2, #4
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d10c      	bne.n	8001dd0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	03d1      	lsls	r1, r2, #15
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <UART_CheckIdleState+0x90>)
 8001dc0:	9200      	str	r2, [sp, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f000 f81a 	bl	8001dfc <UART_WaitOnFlagUntilTimeout>
 8001dc8:	1e03      	subs	r3, r0, #0
 8001dca:	d001      	beq.n	8001dd0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e00f      	b.n	8001df0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2284      	movs	r2, #132	; 0x84
 8001dd4:	2120      	movs	r1, #32
 8001dd6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2288      	movs	r2, #136	; 0x88
 8001ddc:	2120      	movs	r1, #32
 8001dde:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b004      	add	sp, #16
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	01ffffff 	.word	0x01ffffff

08001dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b094      	sub	sp, #80	; 0x50
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	1dfb      	adds	r3, r7, #7
 8001e0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e0c:	e0a7      	b.n	8001f5e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e10:	3301      	adds	r3, #1
 8001e12:	d100      	bne.n	8001e16 <UART_WaitOnFlagUntilTimeout+0x1a>
 8001e14:	e0a3      	b.n	8001f5e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e16:	f7fe fd6d 	bl	80008f4 <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d302      	bcc.n	8001e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8001e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d13f      	bne.n	8001eac <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8001e34:	647b      	str	r3, [r7, #68]	; 0x44
 8001e36:	2301      	movs	r3, #1
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3c:	f383 8810 	msr	PRIMASK, r3
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	494e      	ldr	r1, [pc, #312]	; (8001f88 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8001e4e:	400a      	ands	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e58:	f383 8810 	msr	PRIMASK, r3
}
 8001e5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e66:	643b      	str	r3, [r7, #64]	; 0x40
 8001e68:	2301      	movs	r3, #1
 8001e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6e:	f383 8810 	msr	PRIMASK, r3
}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2101      	movs	r1, #1
 8001e80:	438a      	bics	r2, r1
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e8a:	f383 8810 	msr	PRIMASK, r3
}
 8001e8e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2284      	movs	r2, #132	; 0x84
 8001e94:	2120      	movs	r1, #32
 8001e96:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2288      	movs	r2, #136	; 0x88
 8001e9c:	2120      	movs	r1, #32
 8001e9e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e069      	b.n	8001f80 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d052      	beq.n	8001f5e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d148      	bne.n	8001f5e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2280      	movs	r2, #128	; 0x80
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8001eda:	613b      	str	r3, [r7, #16]
  return(result);
 8001edc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8001ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f383 8810 	msr	PRIMASK, r3
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4924      	ldr	r1, [pc, #144]	; (8001f88 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8001ef8:	400a      	ands	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f383 8810 	msr	PRIMASK, r3
}
 8001f06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f08:	f3ef 8310 	mrs	r3, PRIMASK
 8001f0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f0e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f12:	2301      	movs	r3, #1
 8001f14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	f383 8810 	msr	PRIMASK, r3
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	438a      	bics	r2, r1
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	f383 8810 	msr	PRIMASK, r3
}
 8001f38:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2284      	movs	r2, #132	; 0x84
 8001f3e:	2120      	movs	r1, #32
 8001f40:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2288      	movs	r2, #136	; 0x88
 8001f46:	2120      	movs	r1, #32
 8001f48:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	228c      	movs	r2, #140	; 0x8c
 8001f4e:	2120      	movs	r1, #32
 8001f50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	2100      	movs	r1, #0
 8001f58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e010      	b.n	8001f80 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	4013      	ands	r3, r2
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	425a      	negs	r2, r3
 8001f6e:	4153      	adcs	r3, r2
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	001a      	movs	r2, r3
 8001f74:	1dfb      	adds	r3, r7, #7
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d100      	bne.n	8001f7e <UART_WaitOnFlagUntilTimeout+0x182>
 8001f7c:	e747      	b.n	8001e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b014      	add	sp, #80	; 0x50
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	fffffe5f 	.word	0xfffffe5f

08001f8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2280      	movs	r2, #128	; 0x80
 8001f98:	5c9b      	ldrb	r3, [r3, r2]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_UARTEx_DisableFifoMode+0x16>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e027      	b.n	8001ff2 <HAL_UARTEx_DisableFifoMode+0x66>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2284      	movs	r2, #132	; 0x84
 8001fae:	2124      	movs	r1, #36	; 0x24
 8001fb0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	438a      	bics	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <HAL_UARTEx_DisableFifoMode+0x70>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2284      	movs	r2, #132	; 0x84
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	2100      	movs	r1, #0
 8001fee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b004      	add	sp, #16
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	dfffffff 	.word	0xdfffffff

08002000 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	5c9b      	ldrb	r3, [r3, r2]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002014:	2302      	movs	r3, #2
 8002016:	e02e      	b.n	8002076 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	2101      	movs	r1, #1
 800201e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2284      	movs	r2, #132	; 0x84
 8002024:	2124      	movs	r1, #36	; 0x24
 8002026:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2101      	movs	r1, #1
 800203c:	438a      	bics	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	08d9      	lsrs	r1, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	0018      	movs	r0, r3
 8002058:	f000 f854 	bl	8002104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2284      	movs	r2, #132	; 0x84
 8002068:	2120      	movs	r1, #32
 800206a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	5c9b      	ldrb	r3, [r3, r2]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002094:	2302      	movs	r3, #2
 8002096:	e02f      	b.n	80020f8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	2101      	movs	r1, #1
 800209e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2284      	movs	r2, #132	; 0x84
 80020a4:	2124      	movs	r1, #36	; 0x24
 80020a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2101      	movs	r1, #1
 80020bc:	438a      	bics	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 f813 	bl	8002104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2284      	movs	r2, #132	; 0x84
 80020ea:	2120      	movs	r1, #32
 80020ec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	f1ffffff 	.word	0xf1ffffff

08002104 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002110:	2b00      	cmp	r3, #0
 8002112:	d108      	bne.n	8002126 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	226a      	movs	r2, #106	; 0x6a
 8002118:	2101      	movs	r1, #1
 800211a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2268      	movs	r2, #104	; 0x68
 8002120:	2101      	movs	r1, #1
 8002122:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002124:	e043      	b.n	80021ae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002126:	260f      	movs	r6, #15
 8002128:	19bb      	adds	r3, r7, r6
 800212a:	2208      	movs	r2, #8
 800212c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800212e:	200e      	movs	r0, #14
 8002130:	183b      	adds	r3, r7, r0
 8002132:	2208      	movs	r2, #8
 8002134:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	0e5b      	lsrs	r3, r3, #25
 800213e:	b2da      	uxtb	r2, r3
 8002140:	240d      	movs	r4, #13
 8002142:	193b      	adds	r3, r7, r4
 8002144:	2107      	movs	r1, #7
 8002146:	400a      	ands	r2, r1
 8002148:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	0f5b      	lsrs	r3, r3, #29
 8002152:	b2da      	uxtb	r2, r3
 8002154:	250c      	movs	r5, #12
 8002156:	197b      	adds	r3, r7, r5
 8002158:	2107      	movs	r1, #7
 800215a:	400a      	ands	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800215e:	183b      	adds	r3, r7, r0
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	197a      	adds	r2, r7, r5
 8002164:	7812      	ldrb	r2, [r2, #0]
 8002166:	4914      	ldr	r1, [pc, #80]	; (80021b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002168:	5c8a      	ldrb	r2, [r1, r2]
 800216a:	435a      	muls	r2, r3
 800216c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800216e:	197b      	adds	r3, r7, r5
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <UARTEx_SetNbDataToProcess+0xb8>)
 8002174:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002176:	0019      	movs	r1, r3
 8002178:	f7fe f850 	bl	800021c <__divsi3>
 800217c:	0003      	movs	r3, r0
 800217e:	b299      	uxth	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	226a      	movs	r2, #106	; 0x6a
 8002184:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002186:	19bb      	adds	r3, r7, r6
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	193a      	adds	r2, r7, r4
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	490a      	ldr	r1, [pc, #40]	; (80021b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002190:	5c8a      	ldrb	r2, [r1, r2]
 8002192:	435a      	muls	r2, r3
 8002194:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002196:	193b      	adds	r3, r7, r4
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <UARTEx_SetNbDataToProcess+0xb8>)
 800219c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800219e:	0019      	movs	r1, r3
 80021a0:	f7fe f83c 	bl	800021c <__divsi3>
 80021a4:	0003      	movs	r3, r0
 80021a6:	b299      	uxth	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2268      	movs	r2, #104	; 0x68
 80021ac:	5299      	strh	r1, [r3, r2]
}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b005      	add	sp, #20
 80021b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	080022c0 	.word	0x080022c0
 80021bc:	080022c8 	.word	0x080022c8

080021c0 <__libc_init_array>:
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	2600      	movs	r6, #0
 80021c4:	4d0c      	ldr	r5, [pc, #48]	; (80021f8 <__libc_init_array+0x38>)
 80021c6:	4c0d      	ldr	r4, [pc, #52]	; (80021fc <__libc_init_array+0x3c>)
 80021c8:	1b64      	subs	r4, r4, r5
 80021ca:	10a4      	asrs	r4, r4, #2
 80021cc:	42a6      	cmp	r6, r4
 80021ce:	d109      	bne.n	80021e4 <__libc_init_array+0x24>
 80021d0:	2600      	movs	r6, #0
 80021d2:	f000 f821 	bl	8002218 <_init>
 80021d6:	4d0a      	ldr	r5, [pc, #40]	; (8002200 <__libc_init_array+0x40>)
 80021d8:	4c0a      	ldr	r4, [pc, #40]	; (8002204 <__libc_init_array+0x44>)
 80021da:	1b64      	subs	r4, r4, r5
 80021dc:	10a4      	asrs	r4, r4, #2
 80021de:	42a6      	cmp	r6, r4
 80021e0:	d105      	bne.n	80021ee <__libc_init_array+0x2e>
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
 80021e4:	00b3      	lsls	r3, r6, #2
 80021e6:	58eb      	ldr	r3, [r5, r3]
 80021e8:	4798      	blx	r3
 80021ea:	3601      	adds	r6, #1
 80021ec:	e7ee      	b.n	80021cc <__libc_init_array+0xc>
 80021ee:	00b3      	lsls	r3, r6, #2
 80021f0:	58eb      	ldr	r3, [r5, r3]
 80021f2:	4798      	blx	r3
 80021f4:	3601      	adds	r6, #1
 80021f6:	e7f2      	b.n	80021de <__libc_init_array+0x1e>
 80021f8:	080022d0 	.word	0x080022d0
 80021fc:	080022d0 	.word	0x080022d0
 8002200:	080022d0 	.word	0x080022d0
 8002204:	080022d4 	.word	0x080022d4

08002208 <memset>:
 8002208:	0003      	movs	r3, r0
 800220a:	1882      	adds	r2, r0, r2
 800220c:	4293      	cmp	r3, r2
 800220e:	d100      	bne.n	8002212 <memset+0xa>
 8002210:	4770      	bx	lr
 8002212:	7019      	strb	r1, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	e7f9      	b.n	800220c <memset+0x4>

08002218 <_init>:
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221e:	bc08      	pop	{r3}
 8002220:	469e      	mov	lr, r3
 8002222:	4770      	bx	lr

08002224 <_fini>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr
